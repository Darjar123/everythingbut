diff --git a/modules/product/src/Plugin/DsField/ProductVariationField.php b/modules/product/src/Plugin/DsField/ProductVariationField.php
new file mode 100644
index 0000000..3f94755
--- /dev/null
+++ b/modules/product/src/Plugin/DsField/ProductVariationField.php
@@ -0,0 +1,127 @@
+<?php
+
+namespace Drupal\commerce_product\Plugin\DsField;
+
+use Drupal\Component\Plugin\Factory\DefaultFactory;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\ds\Plugin\DsField\DsFieldBase;
+
+/**
+ * Defines a generic product variation field.
+ *
+ * @DsField(
+ *   id = "product_variation_field",
+ *   deriver = "Drupal\commerce_product\Plugin\DsField\ProductVariationFieldDeriver",
+ * )
+ */
+class ProductVariationField extends DsFieldBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function build() {
+    // @todo Start injecting services when #2713571 lands.
+    $variation_field_renderer = \Drupal::service('commerce_product.variation_field_renderer');
+    /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
+    $product = $this->entity();
+    $variation = $product->getDefaultVariation();
+    $field_name = $this->getVariationFieldName();
+    $field = $this->getFieldConfiguration();
+    $display_options = ['type' => $field['formatter'], 'settings' => []];
+
+    // @todo Pass the label settings once they're known.
+    return $variation_field_renderer->renderField($field_name, $variation, $display_options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm($form, FormStateInterface $form_state) {
+    // @todo Support formatter settings.
+    return[];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary($settings) {
+    return [];
+  }
+
+  /**
+   *
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function formatters() {
+    $field_definition = $this->getFieldDefinition();
+    $plugin_manager = \Drupal::service('plugin.manager.field.formatter');
+    $options = $plugin_manager->getOptions($field_definition->getType());
+    $formatters = [];
+    foreach ($options as $option => $label) {
+      $plugin_class = DefaultFactory::getPluginClass($option, $plugin_manager->getDefinition($option));
+      if ($plugin_class::isApplicable($field_definition)) {
+        $formatters[$option] = $label;
+      }
+    }
+    return $formatters;
+  }
+
+  /**
+   * Gets the variation field name.
+   *
+   * This is the actual field name, unlike getName() which is the field name
+   * prefixed with 'variation_$bundle' for uniqueness.
+   *
+   * @return string
+   *   The field name.
+   */
+  protected function getVariationFieldName() {
+    return $this->pluginDefinition['field_name'];
+  }
+
+  /**
+   * Gets the field definition for the current field.
+   *
+   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   *   The field definition.
+   */
+  protected function getFieldDefinition() {
+    $variation_field_renderer = \Drupal::service('commerce_product.variation_field_renderer');
+    $definitions = $variation_field_renderer->getFieldDefinitions($this->bundle());
+    return $definitions[$this->getVariationFieldName()];
+  }
+
+  /**
+   * Gets the formatter plugin for the current field.
+   *
+   * @return \Drupal\Core\Field\FormatterInterface|null
+   *   The formatter plugin, or NULL if no formatter has been selected.
+   */
+  protected function getFormatter() {
+    $field = $this->getFieldConfiguration();
+    if (!empty($field['formatter'])) {
+      $plugin_manager = \Drupal::service('plugin.manager.field.formatter');
+      $formatter = $plugin_manager->getInstance([
+        'field_definition' => $this->getFieldDefinition(),
+        'view_mode' => $this->viewMode(),
+        'configuration' => [
+          'type' => $field['formatter'],
+          'settings' => $this->getConfiguration(),
+        ],
+      ]);
+    }
+    else {
+      $formatter = NULL;
+    }
+
+    return $formatter;
+  }
+
+}
diff --git a/modules/product/src/Plugin/DsField/ProductVariationFieldDeriver.php b/modules/product/src/Plugin/DsField/ProductVariationFieldDeriver.php
new file mode 100644
index 0000000..ff9f93f
--- /dev/null
+++ b/modules/product/src/Plugin/DsField/ProductVariationFieldDeriver.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace Drupal\commerce_product\Plugin\DsField;
+
+use Drupal\commerce_product\ProductVariationFieldRendererInterface;
+use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides derivative plugins for the ProductVariationField plugin.
+ *
+ * @see Drupal\commerce_product\Plugin\DsField\ProductVariationField
+ * @see plugin_api
+ */
+class ProductVariationFieldDeriver extends DeriverBase implements ContainerDeriverInterface {
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The variation field renderer.
+   *
+   * @var \Drupal\commerce_product\ProductVariationFieldRendererInterface
+   */
+  protected $variationFieldRenderer;
+
+  /**
+   * Constructs a new ProductVariationFieldDeriver object.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   * @param \Drupal\commerce_product\ProductVariationFieldRendererInterface $variation_field_renderer
+   *   The variation field renderer.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, ProductVariationFieldRendererInterface $variation_field_renderer) {
+    $this->entityTypeManager = $entity_type_manager;
+    $this->variationFieldRenderer = $variation_field_renderer;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, $base_plugin_id) {
+    return new static(
+      $container->get('entity_type.manager'),
+      $container->get('commerce_product.variation_field_renderer')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDerivativeDefinitions($base_plugin_definition) {
+    $product_type_storage = $this->entityTypeManager->getStorage('commerce_product_type');
+    /** @var \Drupal\commerce_product\Entity\ProductTypeInterface[] $product_types */
+    $product_types = $product_type_storage->loadMultiple();
+    foreach ($product_types as $product_type) {
+      $variation_type_id = $product_type->getVariationTypeId();
+      $definitions = $this->variationFieldRenderer->getFieldDefinitions($variation_type_id);
+      foreach ($definitions as $field_name => $definition) {
+        $derivative_id = 'variation_' . $variation_type_id . '_' . $field_name;
+
+        $this->derivatives[$derivative_id] = $base_plugin_definition;
+        $this->derivatives[$derivative_id] += [
+          'title' => t('Variation @field', ['@field' => $definition->getLabel()]),
+          'entity_type' => 'commerce_product',
+          'field_name' => $field_name,
+          'ui_limit' => [
+            $variation_type_id . '|*',
+          ]
+        ];
+      }
+    }
+
+    return $this->derivatives;
+  }
+
+}
